<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Edenmal</title><link>https://edenmal.moe/tags/Golang/</link><description>Recent content in Golang on Edenmal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© This page/post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License, please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Sun, 05 Nov 2017 12:15:46 +0200</lastBuildDate><atom:link href="https://edenmal.moe/tags/Golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing your first Golang Microthingy Presentation</title><link>https://edenmal.moe/post/2017/Writing-your-first-Golang-Microthingy-Presentation/</link><pubDate>Sun, 05 Nov 2017 12:15:46 +0200</pubDate><guid>https://edenmal.moe/post/2017/Writing-your-first-Golang-Microthingy-Presentation/</guid><description>I created this presentation to talk a bit about Microservices and Goland. In addition for the presentation, there is a repository containing Golang example code for a very basic Microservice example application.
If you want to present my slides somewhere, please get in contact with me first. Thanks!
If you have any suggestions for the presentation, feel free to leave them in the comments. :)</description></item><item><title>Golang: go get from GitLab</title><link>https://edenmal.moe/post/2017/Golang-go-get-from-Gitlab/</link><pubDate>Fri, 02 Jun 2017 14:39:01 +0200</pubDate><guid>https://edenmal.moe/post/2017/Golang-go-get-from-Gitlab/</guid><description>I just now came across the problem that I created a repository on a private GitLab instance for a Golang project and could not just use go get ... to get it. After a short Google search, I came across this StackOverflow question and thankfully it had a working answer.
The original StackOverflow question can be found here: StackOverflow - how do you use golang with a private gitlab repo?, the question was asked by User James Fremen.</description></item><item><title>Kubernetes Elasticsearch Operator</title><link>https://edenmal.moe/post/2017/Kubernetes-Elasticsearch-Operator/</link><pubDate>Tue, 30 May 2017 10:51:42 +0200</pubDate><guid>https://edenmal.moe/post/2017/Kubernetes-Elasticsearch-Operator/</guid><description>I got the inspiration for writing a so called operator for Kubernetes from the CoreOS project prometheus-operator. So a big thanks to them for creating the project, as also the code is almost completely based on their operator code.
The project can be found on GitHub: https://github.com/galexrt/elasticsearch-operator.
Installation Use the bundle.yaml that is in the repo root, to run the operator on the cluster.
kubectl create -f bundle.yaml Verify the installation of the ThirdPartyResources To verify that the operator has successful installed its ThirdPartyResources, you simply check the Kubernetes server for them:</description></item></channel></rss>