<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Delivery on Edenmal</title><link>https://edenmal.moe/tags/Continuous-Delivery/</link><description>Recent content in Continuous Delivery on Edenmal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© This page/post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License, please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Mon, 10 Jun 2019 14:53:20 +0200</lastBuildDate><atom:link href="https://edenmal.moe/tags/Continuous-Delivery/index.xml" rel="self" type="application/rss+xml"/><item><title>GitLab + Kubernetes: Using GitLab CI's Kubernetes Cluster feature - UPDATED</title><link>https://edenmal.moe/post/2019/GitLab-Kubernetes-Using-GitLab-CIs-Kubernetes-Cluster-feature/</link><pubDate>Mon, 10 Jun 2019 14:53:20 +0200</pubDate><guid>https://edenmal.moe/post/2019/GitLab-Kubernetes-Using-GitLab-CIs-Kubernetes-Cluster-feature/</guid><description>Intro This post walks through using GitLab CI&amp;rsquo;s Kubernetes Cluster feature to deploy built container images to Kubernetes.
This is an update to my old guide which uses the in GitLab 10.3 deprecated Kubernetes integration feature, see: GitLab + Kubernetes: Perfect Match for Continuous Delivery with Container.
NOTE
Please check the requirements before beginning.
Requirements Kubernetes Cluster GitLab instance GitLab Container Registry enabled. GitLab CI runner configured and enabled. The CI runners must be able to access the Kubernetes apiserver.</description></item><item><title>GitLab + Kubernetes: Using GitLab CI's Kubernetes Cluster feature</title><link>https://edenmal.moe/post/2018/GitLab-Kubernetes-Using-GitLab-CIs-Kubernetes-Cluster-feature/</link><pubDate>Sun, 17 Jun 2018 12:35:42 +0200</pubDate><guid>https://edenmal.moe/post/2018/GitLab-Kubernetes-Using-GitLab-CIs-Kubernetes-Cluster-feature/</guid><description>UPDATED An updated version of this post can be found here: GitLab + Kubernetes: Using GitLab CI&amp;rsquo;s Kubernetes Cluster feature - UPDATED.
Please use it instead of this post which is already a bit dated again and not all uptodate with the latest changes to the example repository. Thanks!
Intro This post walks through using GitLab CI&amp;rsquo;s Kubernetes Cluster feature to deploy built container images to Kubernetes.
This is an update to my old guide which uses the in GitLab 10.</description></item><item><title>GitLab + Kubernetes: GitLab on top of Kubernetes</title><link>https://edenmal.moe/post/2017/GitLab-Kubernetes-GitLab-on-top-of-Kubernetes/</link><pubDate>Sat, 04 Nov 2017 18:00:46 +0200</pubDate><guid>https://edenmal.moe/post/2017/GitLab-Kubernetes-GitLab-on-top-of-Kubernetes/</guid><description>Intro This is the third post in the three post series about Kubernetes and GitLab. The first post can be found here: Edenmal - GitLab + Kubernetes: Perfect Match for Continuous Delivery with Container.
This post will not cover how to setup a Postgres and Redis server/cluster for the GitLab. In the near future I may even publish all my current manifests, that also contain Postgres and Redis server/cluster manifests.</description></item><item><title>GitLab + Kubernetes: Running CI Runners in Kubernetes</title><link>https://edenmal.moe/post/2017/GitLab-Kubernetes-Running-CI-Runners-in-Kubernetes/</link><pubDate>Thu, 31 Aug 2017 09:30:00 +0200</pubDate><guid>https://edenmal.moe/post/2017/GitLab-Kubernetes-Running-CI-Runners-in-Kubernetes/</guid><description>Intro In this post, I&amp;rsquo;ll be going over using GitLab CI to create your application&amp;rsquo;s container Continuous Delivery to Kubernetes. This is the second post in the three post series about Kubernetes and GitLab. The first post can be found here: Edenmal - GitLab + Kubernetes: Perfect Match for Continuous Delivery with Container.
NOTE Please check the requirements before beginning.
Requirements Kubernetes cluster Running GitLab instance kubectl binary (with Kubernetes cluster access) StorageClass configured in Kubernetes ReadWriteMany Persistent Storage (example CephFS using Rook) Manifests The manifests shown in this blog post will also be available on GitHub here: GitHub - galexrt/kubernetes-manifests.</description></item><item><title>Kubernetes - WYNTK - GitLab CI + Kubernetes Presentation</title><link>https://edenmal.moe/post/2017/Kubernetes-WYNTK-GitLab-CI-Kubernetes-Presentation/</link><pubDate>Mon, 31 Jul 2017 19:32:15 +0200</pubDate><guid>https://edenmal.moe/post/2017/Kubernetes-WYNTK-GitLab-CI-Kubernetes-Presentation/</guid><description>This is a presentation about WYNTK or &amp;ldquo;What You Need To Know&amp;rdquo; about using GitLab CI with Kubernetes for Continous Delivery as a quick overview.
If you want to present my slides somewhere, please get in contact with me first. Thanks!
If you have any suggestions for the presentation, feel free to leave them in the comments. :)</description></item><item><title>GitLab + Kubernetes: Perfect Match for Continuous Delivery with Container</title><link>https://edenmal.moe/post/2017/GitLab-Kubernetes-Perfect-Match-for-Continuous-Delivery-with-Container/</link><pubDate>Tue, 04 Jul 2017 17:08:36 +0200</pubDate><guid>https://edenmal.moe/post/2017/GitLab-Kubernetes-Perfect-Match-for-Continuous-Delivery-with-Container/</guid><description>Deprecation Warning GitLab has deprecated the Kubernetes integration with release 10.3.
Kubernetes service integration has been deprecated in GitLab 10.3. If the service is active the cluster information still be editable, however we advised to disable and reconfigure the clusters using the new Clusters page. If the service is inactive the fields will be uneditable. Read GitLab 10.3 release post for more information. See https://docs.gitlab.com/ce/user/project/integrations/kubernetes.html.
Instead of the integration, the new GitLab CI Kubernetes Cluster feature should be used, the documentation for that can be found here: https://docs.</description></item></channel></rss>