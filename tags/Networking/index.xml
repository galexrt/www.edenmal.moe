<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking on Edenmal</title><link>https://edenmal.moe/tags/Networking/</link><description>Recent content in Networking on Edenmal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© This page/post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License, please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Wed, 14 Sep 2016 15:50:49 +0200</lastBuildDate><atom:link href="https://edenmal.moe/tags/Networking/index.xml" rel="self" type="application/rss+xml"/><item><title>iptables: Using statistic module</title><link>https://edenmal.moe/post/2016/iptables-Using-statistic-module/</link><pubDate>Wed, 14 Sep 2016 15:50:49 +0200</pubDate><guid>https://edenmal.moe/post/2016/iptables-Using-statistic-module/</guid><description>&amp;ldquo;Load Balance&amp;rdquo; with iptables between two servers Kubernetes uses this method to load balance traffic between pods in the cluster.
The commands below create separate chains for each server and for the load balancing of port 80 in this case:
iptables -t nat -N LB_PORT80 iptables -t nat -N LB_PORT80_SERVER1 iptables -t nat -A LB_PORT80 \ -m statistic --mode random --probability 0.5000 \ -j LB_PORT80_SERVER1 iptables -t nat -N LB_PORT80_SERVER2 iptables -t nat -A LB_PORT80 \ -j LB_PORT80_SERVER2 iptables -t nat -A INPUT -p tcp -m tcp --dport 80 -j LB_PORT80 Dropping packages with a X% probability from a specific IP address My favorite rule to mess with people ;)</description></item><item><title>OpenVSwitch: Persistent IP configuration under Rhel based distros</title><link>https://edenmal.moe/post/2016/OpenVSwitch-Persistent-IP-configuration-under-Rhel-based-distros/</link><pubDate>Thu, 11 Aug 2016 18:22:22 +0200</pubDate><guid>https://edenmal.moe/post/2016/OpenVSwitch-Persistent-IP-configuration-under-Rhel-based-distros/</guid><description>NOTE
This post is a follow up on my post OpenVSwitch: Multi-Host Overlay Network. The interface in this example is named br0. Change according to your interface.
Preparing for using the interface configurations To persist the configurations you can either use the NetworkManager or use good old network-scripts. Here I&amp;rsquo;m going to show how it&amp;rsquo;s done using the good old network-scripts. First at all we have to disable the NetworkManager service with this command:</description></item><item><title>OpenVSwitch: Multi-Host Overlay Network</title><link>https://edenmal.moe/post/2016/OpenVSwitch-Multi-Host-Overlay-Network/</link><pubDate>Tue, 09 Aug 2016 09:25:51 +0200</pubDate><guid>https://edenmal.moe/post/2016/OpenVSwitch-Multi-Host-Overlay-Network/</guid><description>NOTE
This tutorial is written for Fedora but can be applied to all rhel based systems. The only &amp;ldquo;big&amp;rdquo; thing you would need to change is the package manager command from dnf to for example yum.
What is OpenVSwitch OpenVSwitch is a SDN application (Software defined networking) that allows you to create networks and switches on software level.
Requirements At least two servers running Fedora 23 or higher (it may even work with Fedora 21 and higher, but it is not tested!</description></item></channel></rss>